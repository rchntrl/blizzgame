<?php/** * Class GalleryPage * * @property string GalFolder * @method \DataList GalleryImages() */class GalleryPage extends Page {// Used to automatically include photos in a specific folder    public static $db = array(        'GalFolder' => 'Varchar(100)'    );    // One gallery page has many gallery images    public static $has_many = array(        'GalleryImages' => 'GalleryImage'    );    // Add CMS description    static $description = "Add a Photo Gallery to the site";    static $singular_name = 'Photo Gallery';    // Set Permissions    function canEdit($Member = null){if(permission::check('EDIT_GALLERY')){return true;}else{return false;}}    function canCreate($Member = null){if(permission::check('EDIT_GALLERY')){return true;}else{return false;}}    function canDelete($Member = null){if(permission::check('DELETE_GALLERY')){return true;}else{return false;}}    public function getCMSFields() {        $fields = parent::getCMSFields();        /** @var GridFieldConfig $gridFieldConfig */        $gridFieldConfig = GridFieldConfig_RecordEditor::create();        $gridFieldConfig->addComponent(new GridFieldBulkUpload());        $gridFieldConfig->addComponent(new GridFieldBulkManager());        // Creates field where you can type in the folder name --- IT WILL CREATE IN ROOT OF ASSET DIRECTORY!!!        $fields->addFieldToTab("Root.Main", new TextField('GalFolder','Folder name'), 'Metadata');        $fields->removeFieldFromTab('Root.Main', 'Content');        // Used to determine upload folder        $uploadfoldername  = 'Gallery-Images';        if($this->GalFolder != '' || $this->GalFolder != NULL) {            // Specify the upload folder            $uploadfoldername = $this->GalFolder;        }        $gridFieldConfig->getComponentByType('GridFieldBulkUpload')->setUfConfig('folderName', $uploadfoldername);        // Customise gridfield        $gridFieldConfig->removeComponentsByType('GridFieldPaginator'); // Remove default paginator        $gridFieldConfig->addComponent(new GridFieldPaginator(20)); // Add custom paginator        $gridFieldConfig->addComponent(new GridFieldFilterHeader('AuthorID'));        $gridFieldConfig->removeComponentsByType('GridFieldAddNewButton'); // We only use bulk upload button        // Creates sortable grid field        $gridfield = new GridField("GalleryImages", _t("Gallery.GALLERY_CMS_TITLE", "Image Gallery"), $this->GalleryImages(), $gridFieldConfig);        $fields->addFieldToTab('Root.ImageGallery', $gridfield);        return $fields;    }    // Check that folder name conforms to assets class standards. remove spaces and special charachters if used    function onBeforeWrite() {        $this->GalFolder = str_replace(array(' ','-'),'-', preg_replace('/\.[^.]+$/', '-', $this->GalFolder));        parent::onBeforeWrite();    }}class GalleryPage_Controller extends Page_Controller implements PermissionProvider  {    private static $allowed_actions = array(        'viewAuthor',        'viewTag',        'viewSize',        'view',        'rss',    );    static $url_handlers = array(        'author/$ID!' => 'viewAuthor',        'size/$ID!' => 'viewSize',        'tag/$ID!' => 'viewTag',        '$ID!' => 'view',    );    protected $arraySize = array(        'all' => array(            'Name' => '',            'SQLWhere'=> '',            'Title'=>'Отменить фильтры размера',            'ShortName'=>'Все',        ),        'small' => array(            'Name' => 'small',            'SQLWhere'=>'MaxSize < 700',            'Title'=>'рисунки до 700px',            'ShortName'=>'Маленькие'        ),        'medium' => array(            'Name' => 'medium',            'SQLWhere'=>'MaxSize >= 700 and MaxSize < 1400',            'Title'=>'рисунки от 700px до 1400px',            'ShortName'=>'Средние'        ),        'large' => array(            'Name' => 'large',            'SQLWhere'=>'MaxSize >= 1400 and MaxSize < 3000',            'Title'=>'рисунки от 1400px до 3000px',            'ShortName'=>'Большие'        ),        'extra-large' => array(            'Name' => 'extra-large',            'SQLWhere' => 'MaxSize >= 3000',            'Title' => 'рисунки больше 3000px',            'ShortName'=> 'Огромные'        ),    );    public function init() {        parent::init();    }    //Add permission check boxes to CMS    public function providePermissions() {        return array(            "VIEW_GALLERY" => "View Gallery Pages",            "EDIT_GALLERY" => "Edit Gallery Pages",        );    }    public function FilterByAuthor() {        $qb = new SQLQuery();        $qb            ->setFrom('PeopleFace')            ->addLeftJoin('GalleryImage', 'GalleryImage.AuthorID = PeopleFace.ID')            ->setWhere('GalleryImage.ID IS NOT NULL')            ->setGroupBy(array('GalleryImage.AuthorID'))        ;        $records = $qb->execute();        $arrayList = new ArrayList();        foreach($records as $rowArray) {            $arrayList->push(new PeopleFace($rowArray));        }        return $arrayList;    }    public function FilterBySize() {        $sizes = $this->arraySize;        if ($this->urlParams['ID']) {            $id = $this->urlParams['Action'] == 'size' ? $this->urlParams['ID'] : $this->request->getVar('size');            $sizes[$id]['Current'] = $id;            $sizes['all']['Current'] = !$id;        }        else {            $sizes['all']['Current'] = 1;        }        $sizes = new ArrayList($sizes);        return $sizes;    }    public function FilterByTags() {        $qb = new SQLQuery();        $qb            ->setFrom('ElementLink')            ->addLeftJoin('GalleryImage_Tags', 'GalleryImage_Tags.ElementLinkID = ElementLink.ID')            ->setWhere(array(                'ElementLink.SubsiteID = ' . Subsite::currentSubsiteID(),                'GalleryImageID is not null'            ))            ->setGroupBy(array('ElementLinkID'))        ;        $records = $qb->execute();        $tags = new ArrayList();        foreach($records as $rowArray) {            $tags->push(new ElementLink($rowArray));        }        return $tags;    }    public function getFilterUrl($filterName, $value) {        $url = $this->Link();        $filterParams = $this->getFilterURLParams();        // todo оптимизировать так, чтобы урл внутри цикла не генерился каждый раз заново для каждого элемента        $action = $this->urlParams['Action'];        // if I am on some filter page        if ($action) {            if ($filterName == $action) {                // and generate url for the same filter                $url .= $value ? $filterName . '/' . $value : '';            }            else {                // or generate url for another filter                $url .= $action . '/' . $this->urlParams['ID'];                if ($value) {                    $filterParams[$filterName] = $value;                }                else {                    unset($filterParams[$filterName]);                }            }        } else {            // if I am on index page            $url .=  !$value ? '' : $filterName . '/' . $value;            unset($filterParams[$filterName]);        }        if (count($filterParams)) {            $url .= '?' . http_build_query($filterParams);        }        return $url;    }    protected function getFilterURLParams() {        $urlParams = $this->request->getVars();        foreach ($urlParams as $key => $val) {            if (!in_array($key, array('author', 'size', 'tag'))) {                unset($urlParams[$key]);            }        }        return $urlParams;    }    /**     * Common sql query to select GalleryImage rows from database table     *     * @return SQLQuery     */    protected function getGalleryQueryBuilder() {        $qb = new SQLQuery();        $qb            ->setSelect(array(                'GalleryImage.ID',                'GalleryImage.ClassName',                'GalleryImage.Created',                'GalleryImage.LastEdited',                'GalleryImage.Title',                'GalleryImage.GalleryPageID',                'GalleryImage.ImageID',                'GalleryImage.AuthorID',                'GalleryImage.MaxSize',            ))            ->setFrom('GalleryImage')            ->setWhere('GalleryImage.GalleryPageID = ' . $this->ID) // Images must belong to this page        ;        return $qb;    }    /**     * Filter Gallery Images by author, size and tag     *     * @param SQLQuery $qb     * @param String $filterName author|size|tag     * @param string $id filterName id in database table     * @return SQLQuery     */    protected function addFilterToQuery(SQLQuery $qb, $filterName, $id) {        switch ($filterName) {            case 'author':                $qb                    ->addWhere(array(                        'GalleryImage.AuthorID = ' . $id. '',                    ))                ;                break;            case 'size':                $qb->addWhere($this->arraySize[$id]['SQLWhere']);                break;            case 'tag':                $qb                    ->addLeftJoin('GalleryImage_Tags', 'GalleryImage_Tags.GalleryImageID = GalleryImage.ID')                    ->addWhere(array(                        'GalleryImage_Tags.ElementLinkID = ' . $id,                    ))                ;                break;        }        return $qb;    }    /**     * Filter Gallery Images by existing url params     *     * @param SQLQuery $qb     * @return SQLQuery     */    protected function applyFiltersFromRequest($qb) {        foreach ($this->request->getVars() as $var => $value) {            $id = null;            switch ($var) {                case 'author':                    $author = DataObject::get_one("PeopleFace", "\"PeopleFace\".\"LastLinkSegment\" = '" . $value . "'");                    $id = $author->ID;                    break;                case 'size':                    $id = $value;                    break;                case 'tag':                    $tag = DataObject::get_one("ElementLink", "\"ElementLink\".\"LastLinkSegment\" = '" . $value . "'");                    $id = $tag->ID;                    break;            }            if ($id) {                $qb = $this->addFilterToQuery($qb, $var, $id);            }        }        //exit($qb->sql());        return $qb;    }    /**     * Gallery Images Page filtered by Author     *     * @return array     */    public function viewAuthor() {        /** @var PeopleFace $author */        $author = null;        $qb = $this->getGalleryQueryBuilder();        if ($this->urlParams['ID']) {            $id = preg_replace('!([^a-z0-9-])!', '', str_replace(' ', '-', strtolower($this->urlParams['ID'])));            $author = DataObject::get_one("PeopleFace", "\"PeopleFace\".\"LastLinkSegment\" = '" . $id . "'");            if(!$author){                $this->httpError(404);            }            $qb = $this->addFilterToQuery($qb, 'author', $author->ID); // filter by tag            $qb = $this->applyFiltersFromRequest($qb); // additional filters based on url params        }        else {            $this->httpError(404);        }        return array(            'Title' => ($author->TitleRU ? $author->TitleRU : $author->TitleEN),            'GalleryImages' => $this->GalleryImages($qb),            'BackURL' => $this->request->getHeader('Referer')        );    }    /**     * Gallery Images Page filtered by Tag     *     * @return array     */    public function viewTag() {        /** @var ElementLink $tag */        $tag = null;        $qb = $this->getGalleryQueryBuilder();        if($this->urlParams['ID']) {            $id = preg_replace('!([^a-z0-9-])!', '', str_replace(' ', '-', strtolower($this->urlParams['ID'])));            $tag = DataObject::get_one("ElementLink", "\"ElementLink\".\"LastLinkSegment\" = '" . $id . "'");            if(!$tag){                $this->httpError(404);            }            $qb = $this->addFilterToQuery($qb, 'tag', $tag->ID);  // filter by tag            $qb = $this->applyFiltersFromRequest($qb); // additional filters based on url params        }        else {            $this->httpError(404);        }        return array(            'Title' => ($tag->TitleRU ? $tag->TitleRU : $tag->TitleEN),            'GalleryImages' => $this->GalleryImages($qb),            'BackURL' => $this->request->getHeader('Referer')        );    }    /**     * Gallery Images Page filtered by Size     *     * @return array     */    public function viewSize() {        $title = $this->Title;        $qb = $this->getGalleryQueryBuilder();        if ($this->urlParams['ID']) {            $id = $this->urlParams['ID'];            $title = $this->arraySize[$id]['ShortName'];            $qb = $this->addFilterToQuery($qb, 'size', $id); // filter by size            $qb = $this->applyFiltersFromRequest($qb); // additional filters based on url params        }        else {            $this->httpError(404);        }        return array(            'Title' => $title,            'GalleryImages' => $this->GalleryImages($qb),            'BackURL' => $this->request->getHeader('Referer')        );    }    /**     * view Gallery Image     *     * @return array     */    public function view() {        // todo отображать главную картинку и маленький список картинок, расположенных справа и слева        /** @var GalleryImage $image */        $image = null;        if($this->urlParams['ID']) {            $id = $this->urlParams['ID'];            //$id = preg_replace('!([^a-z0-9-])!', '', str_replace(' ', '-', strtolower($id)));            $qb = $this->getGalleryQueryBuilder();            $qb                ->addLeftJoin('File', 'GalleryImage.ImageID = File.ID')                ->addWhere("\"File\".\"FileName\" LIKE '%" . $id . "%'")            ;            $image = new GalleryImage($qb->execute()->first());            if (!$image->ID) {                $this->httpError(404);            }            //$image = DataObject::get_one('GalleryImage');        }        else {            $this->httpError(404);        }        return array(            'Title' => $image->Title,            'GalleryImage' => $image,            'BackURL' => $this->request->getHeader('Referer')        );    }    /**     * @param int $itemsPerPage     * @param SQLQuery|null $query     * @return null|PaginatedList     */    public function GalleryImages(SQLQuery $query = null,  $itemsPerPage = 16)    {        if (!$query) {            $query = $this->getGalleryQueryBuilder();        }        $start = $this->request->getVar('start');        $query->setLimit($itemsPerPage, $start ?: 0);        $images = new ArrayList();        $records = $query->execute();        foreach($records as $rowArray) {            $images->push(new GalleryImage($rowArray));        }        $pages = new PaginatedList($images, $this->request);        $pages            ->setLimitItems(false)            ->setPaginationFromQuery($query)        ;        return $pages;    }    public function Tags() {    }}